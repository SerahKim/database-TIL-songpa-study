/* CONSTRAINS */
-- 제약조건
-- 테이블 작성 시 각 컬럼에 값 기록에 대한 제약조건을 설정할 수 있다.
-- 데이터 무결성 보장을 목적으로 함
-- 입력/수정하는 데이터에 문제가 없는지 자동으로 검사해 주게 하기 위한 목적
-- PRIMARY KEY, NOT NULL, UNIQUE, CHECK, FOREIGN KEY

-- NOT NULL
-- NULL 값을 허용하지 않음
DROP TABLE IF EXISTS USER_NOTNULL;
CREATE TABLE IF NOT EXISTS USER_NOTNULL(
	USER_NO INT NOT NULL,
    USER_ID VARCHAR(255) NOT NULL,
    USER_PWD VARCHAR(255) NOT NULL,
    USER_NAME VARCHAR(255) NOT NULL,
    GENDER VARCHAR(3),
    PHONE VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255)
) ENGINE=INNODB;

DESCRIBE USER_NOTNULL;

INSERT INTO USER_NOTNULL(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL)
VALUES 
(1, 'USER01', 'PASS01', '홍길동', '남', '010-1234-5678', 'hong@email.com'),
(2, 'USER02', 'PASS02', '유관순', '여', '010-1234-5678', 'you@email.com');

SELECT 
    *
FROM
    USER_NOTNULL;

-- NOT NULL 제약조건 에러 발생(NULL 값 적용시)
INSERT INTO USER_NOTNULL(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL)
VALUES
(3, 'USER03', NULL, '이순신', '남', '010-1234-5678', 'lee@gmail.com');

/* UNIQUE */
-- 중복 값을 허용하지 않음
DROP TABLE IF EXISTS USER_UNIQUE;
CREATE TABLE IF NOT EXISTS USER_UNIQUE(
	USER_NO INT NOT NULL UNIQUE,
    USER_ID VARCHAR(255) NOT NULL,
    USER_PWD VARCHAR(255) NOT NULL,
    GENDER VARCHAR(3) NOT NULL,
    PHONE VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255),
    UNIQUE(PHONE)
) ENGINE = INNODB;

-- unique 제약조건 에러 발생 (전화번호 중복값 적용)
INSERT INTO USER_UNIQUE(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL)
VALUES
(3, 'USER03', 'PASS03', '이순신', '남', '010-1234-5678', 'lee@gmail.com');

/* PRIMARY KEY */
-- 테이블에서 한 행의 정보를 찾기 위해 사용할 컬럼을 의미한다.
-- 테이블에 대한 식별자 역할을 한다. (한 행씩 구분하는 역할을 말한다.)
-- NOT NULL + UNIQUE 제약 조건의 의미
-- 한 테이블당 한 개만 설정할 수 있음
-- 컬럼 레벨, 테이블 레벨 둘 다 설정 가능함
-- 한 개의 컬럼에 설정할 수도 있고, 여러 개의 칼럼을 묶어서 설정할 수 있음(복합키)
DROP TABLE IF EXISTS USER_PRIMARYKEY;
CREATE TABLE IF NOT EXISTS USER_PRIMARYKEY(
	USER_NO INT NOT NULL UNIQUE,
    USER_ID VARCHAR(255) NOT NULL,
    USER_PWD VARCHAR(255) NOT NULL,
    USER_NAME VARCHAR(255) NOT NULL,
    GENDER VARCHAR(3) NOT NULL,
    PHONE VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255),
    PRIMARY KEY(USER_NO)
) ENGINE = INNODB;

INSERT INTO USER_PRIMARYKEY(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL)
VALUES
(1, 'USER01', 'PASS01', '홍길동', '남', '010-1234-5678', 'hong@email.com'),
(2, 'USER02', 'PASS02', '유관순', '여', '010-1234-5678', 'you@email.com');

SELECT 
    *
FROM
    USER_PRIMARYKEY;

-- PRIMARY KEY 제약조건 에러 발생(null값적용)
INSERT INTO USER_PRIMARYKEY(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL)
VALUES
(NULL, 'USER01', 'PASS01', '홍길동', '남', '010-1234-5678', 'hong@email.com');


INSERT INTO USER_PRIMARYKEY(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL)
VALUES
(2, 'USER03', 'PASS03', '이순신', '남', '010-7777-7777', 'lee@email.com');

/* FOREIGN KEY */
-- 참조(references)된 다른 테이블에서 제공하는 값만 사용할 수 있음
-- 참조 무결성을 위배하지 않기 위해 사용
-- foreign key 제약 조건에 의해서
-- 테이블 간의 관계(relationship)가 형성됨
-- 제공되는 값 외에는 null을 사용할 수 있음

DROP TABLE IF EXISTS USER_GRADE;
CREATE TABLE IF NOT EXISTS USER_GRADE (
    GRADE_CODE INT NOT NULL UNIQUE,
    GRADE_NAME VARCHAR(255) NOT NULL
)  ENGINE=INNODB;

DESCRIBE USER_GRADE;

INSERT INTO USER_GRADE
VALUES
(10, '일반회원'),
(20, '우수회원'),
(30, '특별회원');

SELECT 
    *
FROM
    USER_GRADE;
    
DROP TABLE IF EXISTS USER_FOREIGNKEY1;
CREATE TABLE IF NOT EXISTS USER_FOREIGNKEY1(
	USER_NO INT PRIMARY KEY,
    USER_ID VARCHAR(255) NOT NULL,
    USER_PWD VARCHAR(255) NOT NULL,
    USER_NAME VARCHAR(255) NOT NULL,
    GENDER VARCHAR(3),
    PHONE VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255),
    GRADE_CODE INT,
    FOREIGN KEY (GRADE_CODE)
    REFERENCES USER_GRADE(GRADE_CODE)
)ENGINE = INNODB;

DESCRIBE USER_FOREIGNKEY1;

INSERT INTO USER_FOREIGNKEY1(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL, GRADE_CODE)
VALUES 
(1, 'USER01', 'PASS01', '홍길동', '남', '010-1234-5678', 'hong@email.com', 10),
(2, 'USER02', 'PASS02', '유관순', '여', '010-7777-7777', 'you@email.com', 20);

SELECT 
    *
FROM
    USER_FOREIGNKEY1;

-- FOREIGN KEY 제약조건 에러 발생 (참조 컬럼에 없는 값 적용)
INSERT INTO USER_FOREIGNKEY1(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL, GRADE_CODE)
VALUES
(3, 'USER02', 'PASS02', '유관순', '여', '010-7777-7777', 'you@email.com', 40);

-- 테이블의 수정과 삭제를 가능하게 만든다.
DROP TABLE IF EXISTS USER_FOREIGNKEY2;
CREATE TABLE IF NOT EXISTS USER_FOREIGNKEY2(
	USER_NO INT PRIMARY KEY,
    USER_ID VARCHAR(255) NOT NULL,
    USER_PWD VARCHAR(255) NOT NULL,
    USER_NAME VARCHAR(255) NOT NULL,
    GENDER VARCHAR(3),
    PHONE VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255),
    GRADE_CODE INT,
    FOREIGN KEY (GRADE_CODE)
    REFERENCES USER_GRADE(GRADE_CODE)
    ON UPDATE SET NULL
    ON DELETE SET NULL
)ENGINE = INNODB;

INSERT INTO USER_FOREIGNKEY2(USER_NO, USER_ID, USER_PWD, USER_NAME, GENDER, PHONE, EMAIL, GRADE_CODE)
VALUES 
(1, 'USER01', 'PASS01', '홍길동', '남', '010-1234-5678', 'hong@email.com', 10),
(2, 'USER02', 'PASS02', '유관순', '여', '010-7777-7777', 'you@email.com', 20);

SELECT 
    *
FROM
    USER_FOREIGNKEY2;

-- 1) 부모 테이블의 grade_code 수정
DROP TABLE IF EXISTS USER_FOREIGNKEY1;
UPDATE USER_GRADE 
SET 
    GRADE_CODE = 1 -- GRADE_CODE 삭제
WHERE
    GRADE_CODE = 10;

-- 2) 부모 테이블의 행 삭제
DELETE FROM USER_GRADE 
WHERE
    GRADE_CODE = 20;

/* CHECK */
DROP TABLE IF EXISTS USER_CHECK;
CREATE TABLE IF NOT EXISTS USER_CHECK(
	USER_NO INT AUTO_INCREMENT PRIMARY KEY,
    USER_NAME VARCHAR(255) NOT NULL,
    GENDER VARCHAR(3) CHECK(GENDER IN('남', '여')),
    AGE INT CHECK(AGE >= 19)
)ENGINE = INNODB;

INSERT INTO USER_CHECK
VALUES
(NULL, '홍길동', '남', 24),
(NULL, '이순신', '남', 33);

SELECT 
    *
FROM
    USER_CHECK;
    
-- GENDER 컬럼 CHECK 제약 조건 에러 발생
INSERT INTO USER_CHECK
VALUES
(NULL, '안중근', '남성', 33);


-- age 컬럼 check 제약 조건 에러 발생
INSERT INTO USER_CHECK
VALUES
(NULL, '유관순', '여', 17);

/* DEFAULT */
-- 컬럼에 NULL 대신 기본 값 적용
DROP TABLE IF EXISTS TBL_COUNTRY;
CREATE TABLE IF NOT EXISTS TBL_COUNTRY(
	COUNTRY_CODE INT AUTO_INCREMENT PRIMARY KEY,
    COUNTRY_NAME VARCHAR(255) DEFAULT '한국',
    POPULATION VARCHAR(255) DEFAULT '0명'
)ENGINE = INNODB;

SELECT 
    *
FROM
    TBL_COUNTRY;
    
INSERT INTO TBL_COUNTRY
VALUES (NULL, DEFAULT, DEFAULT); 